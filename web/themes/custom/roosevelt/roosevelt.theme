<?php

/**
 * @file
 * Functions to support theming in the roosevelt theme.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Render\Renderer;
use Drupal\Core\Entity\EntityInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function roosevelt_preprocess_html(array &$variables) {
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    // When viewing a revision $node will be numeric.
    // @see https://www.drupal.org/node/2495703
    if (is_numeric($node)) {
      $node = Node::load($node);
    }
    if ($node->get('moderation_state')->value !== 'published') {
      if (!isset($variables['attributes']['class'])) {
        $variables['attributes']['class'] = [];
      }

      $variables['attributes']['class'][] = 'unpublished';
    }
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function roosevelt_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /*$ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
    'http-equiv' => 'X-UA-Compatible',
    'content' => 'IE=edge',
    ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function roosevelt_preprocess_page(array &$variables) {
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function roosevelt_theme_suggestions_page_title_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if (is_numeric($node)) {
      $node = Node::load($node);
    }

    $suggestions[] = 'page_title__' . $node->bundle();
  }
}

/**
 * Implements hook_preprocess_page_title().
 */
function roosevelt_preprocess_page_title(array &$variables) {
  if ($user = \Drupal::routeMatch()->getParameter('user')) {
    if (isset($user->field_full_name)) {
      $variables['title']['#markup'] = $user->field_full_name->value;
    }
  }

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if (is_numeric($node)) {
      $node = Node::load($node);
    }

    if ($node->bundle() == 'story') {
      // Get the Author's name from User object
      $uid = $node->getOwnerId();
      $account = User::load($uid);
      $name = '';
      if ($account->hasField('field_full_name')) {
        $name = $account->field_full_name->value;
      }

      $variables['name'] = $name;

      // Get the story types
      $types = [];
      if ($node->hasField('field_story_type')) {
        foreach ($node->get('field_story_type') as $type) {
          $term = Term::load($type->target_id);
          $types [] = $term->getName();
        }

        $variables['types'] = implode(', ', $types);
      }

      // Breakout the date field
      $timestamp = strtotime($node->field_date_published->value);
      $format = 'custom';
      $date_formatter = \Drupal::service('date.formatter');

      $variables['month'] = $date_formatter->format($timestamp, $format, 'M'); // Jul
      $variables['date'] = $date_formatter->format($timestamp, $format, 'd'); // 28
      $variables['day'] = $date_formatter->format($timestamp, $format, 'D'); // Tue
      $variables['year'] = $date_formatter->format($timestamp, $format, 'Y'); // 2020
    }
  }
}

/**
 * Implements hook_preprocess_region() for page.html.twig.
 */
function roosevelt_preprocess_region(array &$variables) {
  if ($variables['region'] == 'header') {
    // Unset the region content for reprocessing.
    $variables['content'] = '';
    $variables['elements']['#children'] = '';

    // Block we want to display individually and hide from "content".
    $hidden_blocks = [
      'roosevelt_search',
      'roosevelt_branding',
      'roosevelt_utility',
      'roosevelt_megamenu'
    ];

    // Unset the block we want to display individually.
    foreach($hidden_blocks as $block) {
      $variables[$block] = $variables['elements'][$block];
      unset($variables['elements'][$block]);
    }

    // Render any remaining blocks.
    $content = \Drupal::service('renderer')->render($variables['elements']);
    $variables['elements']['#children'] = $content;
    unset($variables['elements']['#markup']);

    // Create the $content variable that templates expect.
    $variables['content'] = $variables['elements']['#children'];
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function roosevelt_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    // When viewing a revision $node will be numeric.
    // @see https://www.drupal.org/node/2495703
    if (is_numeric($node)) {
      $node = Node::load($node);
    }

    array_splice($suggestions, 1, 0, 'page__' . $node->bundle());
  }
}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function roosevelt_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function roosevelt_preprocess_block(array &$variables) {
  if ($variables['elements']['#base_plugin_id'] == 'block_content') {
    $block_type = $variables['elements']['content']['#block_content']->bundle();

    switch($block_type) {
      case 'outcome':
        $variables['#attached']['library'][] = 'roosevelt/program';
        break;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function roosevelt_preprocess_paragraph(array &$variables) {
  $elements = $variables['elements'];
  $paragraph = $variables['paragraph'];

  if ($paragraph->getType() == 'herobanner') {
    // Duplicate the image box field and render as carousel
    $carousel_items = '';
    if ($paragraph->hasField('field_image_box')) {
      $carousel_items = $paragraph->field_image_box->view('carousel');
      if ($item_count = count($carousel_items['#items'])) {
        $variables['item_count'] = $item_count - 1;

        foreach ($carousel_items['#items'] as $delta => $item) {
          $variables['content']['carousel_items'][] = $carousel_items[$delta];
        }
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_block_alter().
 */
function roosevelt_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if ($variables['elements']['#base_plugin_id'] == 'block_content') {
    $block_type = $variables['elements']['content']['#block_content']->bundle();
    $suggestions[] = 'block__block_content__' . $block_type;
  }
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function roosevelt_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];
  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function roosevelt_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_preprocess_node().
 */
function roosevelt_preprocess_node(array &$variables) {
  $node = $variables['node'];

  switch($node->bundle()) {
    case "event":
      $dates = $node->get('field_smart_date')->getValue();
      $event_dates = [];
      $event_times = [];
      foreach($dates as $date) {
        if ($date['end_value'] > $date['value']) {
          $start_date = \Drupal::service('date.formatter')->format($date['value'], 'custom', 'M j');
          $end_date = ' - ' . \Drupal::service('date.formatter')->format($date['end_value'], 'custom', 'j, Y');

          $start_time = \Drupal::service('date.formatter')->format($date['value'], 'custom', 'h:i');
          $end_time = ' - ' . \Drupal::service('date.formatter')->format($date['end_value'], 'custom', 'h:ia');
        }
        else {
          $start_date = \Drupal::service('date.formatter')->format($date['value'], 'custom', 'M j, Y');
          $end_date = '';

          $start_time = \Drupal::service('date.formatter')->format($date['value'], 'custom', 'h:ia');
          $end_time = '';
        }
        $event_dates[]['#markup'] = $start_date . $end_date;
        $event_times[]['#markup'] = $start_time . $end_time;
      }
      $variables['event_dates'] = $event_dates;
      $variables['event_times'] = $event_times;
      break;
  }

}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function roosevelt_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function roosevelt_form_alter(array &$variables) {
  if ($variables['#form_id'] == 'search_block_form') {
    $variables['#theme'] = ['search_form'];
    unset($variables['keys']);
    unset($variables['actions']);
  }
}

/**
 * Implements hook_preprocess_form().
 */
function roosevelt_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements hook_theme_suggestions_form_alter().
 */
function roosevelt_theme_suggestions_form_alter(array &$suggestions, array $variables) { }

/**
 * Implements hook_preprocess_select().
 */
function roosevelt_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function roosevelt_preprocess_field(array &$variables, $hook) {
  $element = $variables['element'];

  if ($element['#entity_type'] == 'paragraph') {
    $paragraph = $element['#object'];
  }

  switch ($variables['element']['#field_name']) {
    case 'field_sectionheading':
      $variants = roosevelt_get_variants($paragraph);
      $variables['heading'] = [
        'level' => $paragraph->get('field_heading_level')->value,
        'theme' => $paragraph->get('field_titletheme')->value,
        'variants' => implode(' ', $variants),
      ];
      break;
    case 'field_sectiondescription':
      $variants = roosevelt_get_variants($paragraph);
      $variables['theme'] = $paragraph->get('field_descriptiontheme')->value;
      $variables['variants'] = implode(' ', $variants);
      break;
    case 'field_calltoaction':
      $variants = roosevelt_get_variants($paragraph);
      $variables['variants'] = implode(' ', $variants);
      break;
  }
}

function roosevelt_get_variants($paragraph) {
  $variants = explode('-', $paragraph->get('field_sectionvariant')->value);

  return $variants;
}

function roosevelt_get_palette($paragraph) {
  $color_palette = $paragraph->get('field_sectioncolor')->value;

  return $color_palette;
}


/**
 * Implements hook_preprocess_media().
 */
function roosevelt_preprocess_media(array &$variables) {
  $media_entity = $variables['media'];
  $referencing_field = $media_entity->_referringItem->getParent();
  $parent_entity = $referencing_field->getParent();
  $paragraph_entity = $parent_entity->getEntity();
  if ($paragraph_entity->bundle() == 'textsection') {
    $variants = roosevelt_get_variants($paragraph_entity);
    $media_variant = 'center';
    if (count($variants) > 1) {
      $variant = $variants[1];
      switch ($variant) {
        case 'left':
          $media_variant = 'right';
          break;
        case 'right':
          $media_variant = 'left';
          break;
        default:
          break;
      }
    }
    $variables['variant'] = $variant;
    $variables['media_variant'] = $media_variant;

    if ($variables['elements']['#view_mode'] == 'modal') {
      // oembed providers don't like the embed url but it is needed for iframes.
      $url = $media_entity->get('field_media_oembed_video')->value;
      $new_url = str_replace('://youtu.be/', '://youtube.com/embed/', $url);
      $variables['modal_url'] = $new_url;
    }
  }
}

/**
 * Implements hook_preprocess_details().
 */
function roosevelt_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function roosevelt_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function roosevelt_preprocess_menu_local_task(array &$variables) {
  $classes = ['nav-link'];

  if (!empty($variables['element']['#active'])) {
    $classes[] = 'active';
  }

  $variables['element']['#link']['url']->setOption('attributes', [
    'class' => $classes
  ]);
}

/**
 * Implements hook_preprocess_menu().
 */
function roosevelt_preprocess_menu(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
  if ($variables['menu_name'] == 'main') {
    foreach($variables['items'] as $key => $item) {
      if ($item['in_active_trail']) {
        $variables['items'][$key]['url']->setOption('attributes', ['id'=>'selectedNav']);
      }
    }
  }
}

/**
 * Implements hook_preprocess_layout() for page.html.twig.
 */
function roosevelt_preprocess_layout(array &$variables) {
  if ($variables['layout']->id() == 'layout_program_detail') {
    $route_name = \Drupal::routeMatch()->getRouteName();

    foreach(Element::children($variables['content']) as $key) {
      $section = $variables['content'][$key];
      $variables['has_' . $key] = true;

      // Only do this on node displays
      if (strpos($route_name, 'layout_builder.') === 0 &&
          array_key_exists('#attributes', $section)
      ) {
        // remove because it is not needed here
        unset($section['#attributes']);
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_layout_alter().
 */
function roosevelt_theme_suggestions_layout_alter(array &$suggestions, array $variables) {
/*
  ksm($suggestions);
  ksm($variables['content']);
*/
}
